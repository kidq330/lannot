Loops Criteria
====================

Reminder : We want to place a label if we enter in a loop which means:
* At the start of the loop if we are in a while(1) of in a do..while..
* In the "If" generated by frama-c otherwise

Using the option `-lannot-handle-dowhile`, we can change supported loops

Different cases
----------------

Here is a code that show all possibilities for loop transformations :
```c
while(1){;} //1
while(1) donothing(); //2
while(i < 10); //3
while(i < 10) donothing(); //4
while(i++); //5
while(i++) donothing(); //6

do{;} while(1); //7
do{donothing();} while(1); //8
do{;} while(i < 10); //9
do{donothing();} while(i < 10); //10
do{;} while(i++); //11
do{donothing();} while(i++); //12
```

`donothing()` is just a void function hat does nothing

#### loop 1 and 7

Here the option does not matter

```c
while (1) pc_label(1,1,"LOOPIN");
```

#### loop 2 and 8

Here the option does not matter

```c
while (1) {
    pc_label(1,2,"LOOPIN");
}
```

#### loop 3 and 9

Whitout the option :

```c
while (1) 
	if (i < 10) pc_label(1,3,"LOOPIN"); else break;LOOPIN");
}
```

With the option :
```c
while (1) {
    pc_label(1,3,"LOOPIN");
	if (! (i < 10)) break;
  }
```
Without the option it is correct for loop 3 but incorrect for the 9th one, and with it correct for the loop 0 and incorrect for the loop 3

#### loop 4

Here the option does not matter
```c
while (1) {
	if (i < 10) pc_label(1,4,"LOOPIN"); else break;
    donothing();
}
```

#### loop 5 and 11

Whitout :
```c
while (1) {
	int tmp;
    tmp = i;
    i ++;
    if (tmp) pc_label(1,5,"LOOPIN"); else break;
  }
```

With:
```c
while (1) {
    int tmp;
    pc_label(1,5,"LOOPIN");
    tmp = i;
    i ++;
    if (! tmp) break;
  }
```
Here the loop is correct only without the option for 5, but correct with the option only for 11. The CIL transformation add some instructions before the condition test, so it looks like a do..while.. since the body is empty in the loop 5.

#### loop 6

Here the option does not matter since we know it's a while (because the body is not empty).
```c
while (1) {
	int tmp_0;
    tmp_0 = i;
    i ++;
    if (tmp_0) pc_label(1,6,"LOOPIN"); else break;
    donothing();
  }
```

#### loop 10

Without the option:
```c
while (1) {
    donothing();
    if (i < 10) pc_label(1,10,"LOOPIN"); else break;
}
```
With it:
```c
while (1) {
    pc_label(1,10,"LOOPIN");
    donothing();
    if (! (i < 10)) break;
}
```
Here it is correct with the option, we need to place the label before executing the body.

#### loop 12

Without the option:
```c
while (1) {
	int tmp_2;
    donothing();
    tmp_2 = i;
    i ++;
    if (tmp_2) pc_label(1,12,"LOOPIN"); else break;
}
```
With the option:
```c
while (1) {
    int tmp_2;
    pc_label(1,12,"LOOPIN");
    donothing();
    tmp_2 = i;
    i ++;
    if (! tmp_2) break;
  }
```

As we can see here, without the option the do..while is considered as a normal while, so we execute the body before the label.




















